#pragma kernel CSMain
 
#define threadX 8
#define threadY 8
#define threadZ 8

#define strideX 8
#define strideY 8
#define strideZ 8

#define gridX (threadX * strideX)
#define gridY (threadY * strideY)
#define gridZ (threadZ * strideZ)

 
//Shaping Factors;
#define _LengthOfConnectionSprings       0.0001
#define _ConnectionSpringStrength        .3
#define _MaxVel                          3.5
#define _MaxForce                        3.2
#define _ForceMultiplier                 0.05

#define _Dampening                       .94
#define _HandRepelRadius                 1.3
#define _HandRepelStrength               .05

#define _ReturnSpringStrength            2.1



//low level
float _Time;
float _Delta;


float  _Drawing;
int _RibbonWidth;
int _RibbonLength;
int _NumberHands;


float radius = .4;

struct VertC4 {

  float3 pos;
  float3 vel;
  float3 nor;
  float2 uv;

  float  ribbonID;
  float  life; 

  float3 debug;

  float row;
  float col;

  float lID;
  float rID;
  float uID;
  float dID;

};

struct Pos {
  float3 pos;
};

struct Head{

  float4x4 localToWorld;
  float4x4 worldToLocal;
  float3 pos;
  float3 debug;

};

struct Hand{

  float4x4 localToWorld;
  float4x4 worldToLocal;
  float3 pos;
  float3 vel;
  float trigger;
  float3 debug;

};


struct Human{

  Head head;
  Hand hand1;
  Hand hand2;

};

int _NumberHumans;




float3 springForce( float3 p1 , float3 p2 , float d ){

  float3 dir = p1 - p2;
  float l = length( dir );
  dir = normalize( dir );

  float dif = l - d;

  return dif * dif * float(sign(dif)) * -dir;

}

float3 handForce( float3 p1 , float3 p2 , float d ){

  float3 dir = p1 - p2;
  float l = length( dir );

  if( length( p1 ) != 0 && length( p2 ) != 0 && l > 0 ){
    dir = normalize( dir );
  

    float dif = 0.;
    if( l < d ){
      dif = (d-l)/ d;
    }

    return dif * -dir;

  }else{
    return float3(0,0,0);
  }

}



RWStructuredBuffer<VertC4> vertBuffer;
RWStructuredBuffer<Pos> ogBuffer;
RWStructuredBuffer<float4x4> transBuffer;
RWStructuredBuffer<Human> humanBuffer;
RWStructuredBuffer<float4> audioBuffer;
int _AudioLength;

[numthreads(threadX,threadY,threadZ)]
void CSMain (uint3 id : SV_DispatchThreadID) {
  
  int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  VertC4 vert = vertBuffer[pID];
  Pos og = ogBuffer[pID];

  float3 force = float3( 0 , 0 , 0 );
 


    for( int i = 0; i < _NumberHumans; i++){

      Human h = humanBuffer[i];


      float3 head = h.head.pos;
      //float3 hand1 = h.hand1.pos;
      //float3 hand2 = h.hand2.pos;
      //float3 dif;
      //dif = hand1 - vert.pos;

      float3 humanForce = float3(0,0,0);

      force += (h.hand1.trigger -.2) * _HandRepelStrength * handForce( vert.pos , h.hand1.pos , _HandRepelRadius );
      force += (h.hand2.trigger -.2) * _HandRepelStrength * handForce( vert.pos , h.hand2.pos , _HandRepelRadius );


      force += humanForce * .0000001;


    }

  //Return Spring Forces
  float3 transformedOG =  mul( transBuffer[0] , float4( og.pos , 1.) ).xyz;
  force +=  _ReturnSpringStrength * springForce( vert.pos , transformedOG  , 0.001 );


  //Connection Spring Forces
  float3 l = vertBuffer[vert.lID].pos;
  float3 r = vertBuffer[vert.rID].pos;
  float3 u = vertBuffer[vert.uID].pos;
  float3 d = vertBuffer[vert.dID].pos;

  float3 connectionForce = float3( 0. , 0. , 0. );

  float cs = .1;
  float ls = .01;


  connectionForce += cs * springForce( vert.pos , l , ls );
  connectionForce += cs * springForce( vert.pos , r , ls );
  if( vert.uv.y < 1 - ( 1/  float(_RibbonLength)) ){ connectionForce += cs * springForce( vert.pos , u , ls ); }
  if( vert.uv.y > 0 ){ connectionForce += cs * springForce( vert.pos , d , ls ); }

  force += connectionForce;
  vert.debug = connectionForce;

  //float a = length( audioBuffer[int( (( abs(vert.uv.y - 1) + _Time * .1) % 1 )  * float( _AudioLength))] );
  
  //float3( )
  //force -= vert.nor * pow( a , .3 ) * .3;

  //Calculate normal from connections here instead of vert shader
  vert.nor = normalize( cross( (l - r) , (u-d) ));

  // Limit Force;
  if( length( force ) > _MaxForce ){ force = normalize( force )* _MaxForce; }

  vert.vel += force * _ForceMultiplier;

  // Limit Velocity
  if( length( vert.vel ) > _MaxVel ){ vert.vel = normalize( vert.vel )* _MaxVel; }

  vert.vel *= _Dampening;

  vert.pos += vert.vel ;

  Pos p;

  p.pos = vert.pos * .95;



  if( vert.life < 0 ){
    vert.pos = transformedOG * .999;
    vert.life = 1;
  }

  //vert.pos = transformedOG * .999;



  vertBuffer[pID] = vert;

}